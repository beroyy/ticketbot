// ====================
// TEAM MODELS
// ====================

model Team {
  id          Int      @id @default(autoincrement())
  guildId     String   @map("guild_id")
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(500)
  color       String?  @db.VarChar(7)  // Hex color for UI
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") // Added soft delete
  
  // Relations
  guild         Guild           @relation(fields: [guildId], references: [id], onDelete: Cascade)
  teamMembers   TeamMember[]
  
  @@unique([guildId, name])
  @@index([guildId])
  @@index([deletedAt]) // Index for soft delete queries
  @@map("teams")
}

model TeamMember {
  id          Int      @id @default(autoincrement())
  teamId      Int      @map("team_id")
  discordId   String   @map("discord_id") // Discord user ID
  role        String   @db.VarChar(50) // Flexible for custom roles
  joinedAt    DateTime @default(now()) @map("joined_at")
  
  // Relations
  team         Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  discordUser  DiscordUser  @relation(fields: [discordId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, discordId])
  @@index([discordId])
  @@map("team_members")
}

model TeamRole {
  id                Int      @id @default(autoincrement())
  guildId           String   @map("guild_id")
  name              String   @db.VarChar(100)
  discordRoleId     String?  @map("discord_role_id") // NULL if not yet created in Discord
  status            TeamRoleStatus @default(ACTIVE) // Now uses enum
  color             String?  @db.VarChar(7)  // Hex color
  position          Int      @default(0) // For hierarchy
  isDefault         Boolean  @default(false) @map("is_default") // true for admin/support
  isManaged         Boolean  @default(true) @map("is_managed") // true = managed by our system
  permissions       BigInt   @default(0) // Bitfield for permissions
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  guild             Guild               @relation("GuildTeamRoles", fields: [guildId], references: [id], onDelete: Cascade)
  teamRoleMembers   TeamRoleMember[]
  panelTeamRoles    PanelTeamRole[]
  events            Event[]
  
  @@unique([guildId, discordRoleId])
  @@unique([guildId, name])
  @@index([guildId])
  @@map("team_roles")
}

model TeamRoleMember {
  id              Int      @id @default(autoincrement())
  discordId       String   @map("discord_id")
  teamRoleId      Int      @map("team_role_id")
  assignedAt      DateTime @default(now()) @map("assigned_at")
  assignedById    String?  @map("assigned_by_id")
  
  // Relations
  discordUser     DiscordUser  @relation(fields: [discordId], references: [id], onDelete: Cascade)
  teamRole        TeamRole     @relation(fields: [teamRoleId], references: [id], onDelete: Cascade)
  assignedBy      DiscordUser? @relation("RoleAssignments", fields: [assignedById], references: [id])
  
  @@unique([discordId, teamRoleId])
  @@index([discordId])
  @@index([teamRoleId])
  @@map("team_role_members")
}

model TeamMemberPermission {
  id                     Int      @id @default(autoincrement())
  discordId              String   @map("discord_id")
  guildId                String   @map("guild_id")
  additionalPermissions  BigInt   @default(0) @map("additional_permissions") // Bitfield for extra perms
  grantedAt              DateTime @default(now()) @map("granted_at")
  grantedById            String?  @map("granted_by_id")
  
  // Relations
  discordUser            DiscordUser  @relation(fields: [discordId], references: [id], onDelete: Cascade)
  guild                  Guild        @relation("GuildTeamMemberPermissions", fields: [guildId], references: [id], onDelete: Cascade)
  grantedBy              DiscordUser? @relation("PermissionGrants", fields: [grantedById], references: [id])
  
  @@unique([discordId, guildId])
  @@index([discordId])
  @@index([guildId])
  @@map("team_member_permissions")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique // e.g., "PANEL_CREATE"
  category    String   // e.g., "Panel Management"
  description String?
  bitValue    BigInt   @map("bit_value") // The bit position (1 << n)
  
  @@map("permissions")
}