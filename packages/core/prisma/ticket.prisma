model Ticket {
  id                      Int       @id @default(autoincrement())
  guildId                 String    @map("guild_id")
  number                  Int       @map("number")
  panelId                 Int?      @map("panel_id")
  panelOptionId           Int?      @map("panel_option_id")
  openerId                String    @map("opener_id")
  claimedById             String?   @map("claimed_by_id")
  channelId               String    @map("channel_id")
  categoryId              String?   @map("category_id")
  subject                 String?   @db.VarChar(100)
  status                  TicketStatus  @default(OPEN)
  excludeFromAutoclose    Boolean   @default(false) @map("exclude_from_autoclose")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  closedAt                DateTime? @map("closed_at")
  deletedAt               DateTime? @map("deleted_at")

  guild                   Guild                   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  panel                   Panel?                  @relation(fields: [panelId], references: [id])
  panelOption             PanelOption?            @relation(fields: [panelOptionId], references: [id])
  opener                  DiscordUser             @relation("TicketOpener", fields: [openerId], references: [id])
  claimedBy               DiscordUser?            @relation("TicketClaimer", fields: [claimedById], references: [id])
  
  lifecycleEvents         TicketLifecycleEvent[]
  transcript              Transcript?
  ticketParticipants      TicketParticipant[]
  events                  Event[]

  @@unique([guildId, number])
  @@index([deletedAt])
  @@index([guildId, status])
  @@index([openerId, status])
  @@index([channelId])
  @@map("tickets")
}

model TicketParticipant {
  ticketId  Int    @map("ticket_id")
  userId    String @map("user_id")
  role      String @db.VarChar(10)

  ticket       Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  discordUser  DiscordUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([ticketId, userId])
  @@map("ticket_participants")
}

model TicketLifecycleEvent {
  id              Int      @id @default(autoincrement())
  ticketId        Int      @map("ticket_id")
  timestamp       DateTime @default(now())
  action          String   @db.VarChar(50)
  performedById   String   @map("performed_by_id")
  details         Json?
  claimedById     String?  @map("claimed_by_id")
    closedById      String?  @map("closed_by_id")
  closeReason     String?  @map("close_reason")

  ticket          Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  performedBy     DiscordUser @relation("LifecyclePerformedBy", fields: [performedById], references: [id])
  claimedBy       DiscordUser? @relation("LifecycleClaimer", fields: [claimedById], references: [id])
  closedBy        DiscordUser? @relation("LifecycleCloser", fields: [closedById], references: [id])

  @@index([ticketId])
  @@index([action])
  @@map("ticket_lifecycle_events")
}

model Transcript {
  id              Int      @id @default(autoincrement())
  ticketId        Int      @unique @map("ticket_id")
  summary         String?
  sentimentScore  Float?   @map("sentiment_score")
  embedding       String?
  formData        Json?    @map("form_data")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  ticketMessages       TicketMessage[]
  ticketHistory        TicketHistory[]
  ticketFieldResponses TicketFieldResponse[]
  ticketFeedback       TicketFeedback?

  ticket          Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("transcripts")
}

model TicketMessage {
  id              Int       @id @default(autoincrement())
  transcriptId    Int       @map("transcript_id")
  messageId       String    @unique @map("message_id")
  authorId        String    @map("author_id")
  content         String?
  embeds          String?
  attachments     String?
  messageType     String?   @db.VarChar(20) @map("message_type")
  referenceId     String?   @map("reference_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  editedAt        DateTime? @map("edited_at")
  deletedAt       DateTime? @map("deleted_at")

  transcript   Transcript  @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  author       DiscordUser @relation(fields: [authorId], references: [id])

  @@index([transcriptId])
  @@map("ticket_messages")
}

model TicketFieldResponse {
  id            Int    @id @default(autoincrement())
  transcriptId  Int    @map("transcript_id")
  fieldId       Int    @map("field_id")
  value         String

  transcript Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  field      FormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([transcriptId])
  @@map("ticket_field_responses")
}

model TicketHistory {
  id              Int      @id @default(autoincrement())
  transcriptId    Int      @map("transcript_id")
  timestamp       DateTime @default(now())
  action          String   @db.VarChar(50)
  performedById   String   @map("performed_by_id")
  details         String?

  transcript   Transcript  @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  performedBy  DiscordUser @relation(fields: [performedById], references: [id])

  @@index([transcriptId])
  @@map("ticket_history")
}

model TicketFeedback {
  id              Int      @id @default(autoincrement())
  transcriptId    Int      @unique @map("transcript_id")
  submittedById   String   @map("submitted_by_id")
  rating          Int
  comment         String?
  submittedAt     DateTime @default(now()) @map("submitted_at")

  transcript   Transcript  @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  submittedBy  DiscordUser @relation(fields: [submittedById], references: [id])

  @@map("ticket_feedback")
}

model TicketAnalyticsSnapshot {
  id                Int      @id @default(autoincrement())
  guildId           String   @map("guild_id")
  date              DateTime @db.Date
  totalOpen         Int      @default(0) @map("total_open")
  totalClosed       Int      @default(0) @map("total_closed")
  totalCreated      Int      @default(0) @map("total_created")
  avgResolutionTime Float?   @map("avg_resolution_time")
  avgResponseTime   Float?   @map("avg_response_time")
  byPanel           Json?    @map("by_panel")
  byStaff           Json?    @map("by_staff")
  byCategory        Json?    @map("by_category")
  createdAt         DateTime @default(now()) @map("created_at")

  guild             Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, date])
  @@index([guildId])
  @@index([date])
  @@map("ticket_analytics_snapshots")
}